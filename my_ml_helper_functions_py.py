{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-08-09T21:52:22.113665Z\",\"iopub.execute_input\":\"2022-08-09T21:52:22.114150Z\",\"iopub.status.idle\":\"2022-08-09T21:52:22.420650Z\",\"shell.execute_reply.started\":\"2022-08-09T21:52:22.114112Z\",\"shell.execute_reply\":\"2022-08-09T21:52:22.419058Z\"}}\n\n### Helper functions (general)\n\n\n\nimport gc\nimport time\nimport sys\n\n# from IPython.core.debugger import set_trace\nfrom IPython.display import Audio, display  \n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\n\n\n\n\n\nprint('\\nLibraries version :\\n')\nprint('Python     : ' + sys.version)\nprint('NumPy      : ' + np.__version__)\nprint('Pandas     : ' + pd.__version__)\n# print('Matplotlib : ' + mpl.__version__)\n# print('Seaborn    : ' + sns.__version__)\n# import sklearn\n# print('SkLearn    : ' + sklearn.__version__)\n\n\"\"\"\nOn Kaggle:\nLibraries version :\nPython     : 3.7.12 | packaged by conda-forge  \nNumPy      : 1.19.5 now 1.21.5 (april'22)\nPandas     : 1.3.4 now 1.3.5\nMatplotlib : 3.5.1\nSeaborn    : 0.11.2\nSKlearn    : 0.23.2  #1.02 since april'22\n\nOn Kaggle (with latest environment option):\nLibraries version :\nPython     : 3.7.12 | packaged by conda-forge  \nNumPy      : 1.20.3\nPandas     : 1.3.5\nMatplotlib : 3.5.1\nSeaborn    : 0.11.2\nSKlearn    : 1.0.1\n\"\"\"\n\n# # ipympl have pb installation in kaggle\n# # %conda install ipympl  \n# # %matplotlib widget\n\n# # %matplotlib qt\n# # %matplotlib notebook \n# # to get interactive plot (can zoom & horiz. scroll but change layout \n# #   from inline)   # or %matplotlib qt ?\n# # usage error when comments after jupyter magic command!!\n# %matplotlib inline\n\n# #custom_params = {\"axes.spines.right\": False, \"axes.spines.top\": False}\n# sns.set_theme(context='paper')   #rc=custom_params\n# # context: \"notebook\"(default), “paper”, “talk”, and “poster”  \n# #   for scaling/sizes\n# # style: darkgrid(default), whitegrid, dark, white, ticks  #for general \n# #   style of the plots\n# # palette: deep(default), muted, bright, pastel, dark, colorblind, ... \n# #   paste1,..., set2, ..., \n# #   ‘light:<color>’, ‘dark:<color>’, ‘blend:<color>,<color>   \n# #   https://seaborn.pydata.org/tutorial/color_palettes.html   \n\n\n# # pd.set_option('display.width', 120)\n# pd.set_option('display.max_columns', None)  # print all columns\n# # pd.set_option('display.show_dimensions', True)  # to always show the \n# #   dimensions of the df when printed\n\n# # # np.set_printoptions(formatter={'float': '{: 0.3f}'.format})\n# np.set_printoptions(edgeitems=5, linewidth=120,\n#                     formatter={'float': '{: 0.3f}'.format})\n\n\nnl = \"\\n\"\n\nCEND    = '\\33[0m'  ; CBOLD   = '\\33[1m'  ; CITALIC = '\\33[3m'   \nCUDL    = '\\33[4m'  ; CYELLOW = '\\33[33m' ; CWHITE  = '\\33[37m'\nCBLACK  = '\\33[30m' ; CRED    = '\\33[31m' ; CGREEN  = '\\33[32m' \nCBLUE   = '\\33[34m' ; CVIOLET = '\\33[35m' ; CBEIGE  = '\\33[36m' \n\n\n\n\ndef myprint(text, color, bold=False, udl=False, italic=False):  \n    '''Print in color, bold, underlined or italic'''\n    # [Or use html from ipython]\n    \n    s = ''\n    if bold:   s += CBOLD\n    if udl:    s += CUDL\n    if italic: s += CITALIC\n    s += color + text + CEND + '\\n'\n    print(s)\n\n\n    \ndef explore(df, miss=True, valcount=True): \n    '''Basic exploration on a dataframe'''\n\n    # pb when lists in the column and do df.count_values()\n    #  the pb is the memory size, it works for 10k lines but not 100k\n       \n    myprint('\\n----- FIRST LINES -----', CVIOLET, bold=True, udl=True, \n            italic=False)\n    display(df.head(5))\n    # print(df.shape, '\\n') ; # print(df.dtypes, '\\n')\n    \n    myprint('\\n----- INFO -----', CVIOLET, bold=True, udl=True, \n            italic=False)\n    display(pd.DataFrame(df.info(memory_usage='deep', verbose=True, \n                                 show_counts=True)))  \n    \n    myprint('\\n----- DESCRIBE -----', CVIOLET, bold=True, udl=True, \n            italic=False)\n    try: \n        display(pd.DataFrame(df.describe(include=['number'])))\n        display(pd.DataFrame(df.describe(include=['object'])))\n        #display(pd.DataFrame(df.describe(include=['category'])))\n    except ValueError:  #if no number columns or no object columns\n        pass\n    \n    # Unique and missing values per column\n    if miss:\n        uni_miss(df)\n    \n    # Value counts per column\n    if valcount: \n        myvalcount(df, 10)\n    \n            \n\ndef uni_miss(df):\n    '''For the chosen columns of a DF, gives the number/% of missing \n          values and the number of unique values\n       Example: uni_miss(data0[['len code']])\n    '''\n    \n    print('\\n-----', namestr(df, globals()) )#[0])\n    myprint('----- MISSING AND UNIQUE VALUES -----', CVIOLET, bold=True, \n            udl=True, italic=False)\n\n    df1 = pd.Series(df.isna().mean())\n    df2 = pd.Series(df.isna().sum())\n    df3 = pd.concat([df1,df2], axis=1)\n    df3.columns = ['%missing', '#missing']\n    df3['#values'] = df.shape[0] - df3['#missing'] \n    if isinstance(df,pd.DataFrame):\n        df3['#unique'] = [len(df[c].apply(lambda x: str(x)).unique()) \n                          for c in df.columns]  #includes NaN\n        #tod: substract 1 when NaN in list to have count w/o NaN\n        df3['type'] = [df[c].dtypes for c in df.columns] \n    else:   # if df is a Series or one column of a DataFrame\n        df3['#unique'] = [len(df.apply(lambda x: str(x)).unique())]  \n            # includes NaN\n        df3['type'] = [df.dtypes]  \n\n    # Use incremental number index to get number of indicators\n    df3['column'] = df3.index\n    df3.reset_index(drop=True, inplace=True)\n    df3.sort_values('%missing', inplace=True)\n    df3.index = np.arange(1, len(df3) + 1)\n    # Arrange the order of the columns\n    cols = list(df3.columns)\n    cols = [cols[-1]] + cols[:-1]\n    df3 = df3[cols]\n    \n    with pd.option_context('display.max_rows', None):\n        display(df3.sort_values(by='%missing'))\n    \n\n     \ndef myvalcount(df, n_top=10):\n    '''For each DF column, gives the list of the n_top most frequent \n          values and the number of occurences\n       Example: myvalcount(data0[['len code']])\n       Too slow (jam) if 100k lines of lists\n    '''\n    \n    if isinstance(df,pd.DataFrame):\n        cols = df.columns\n    else:   # if df is a Series or one column of a DataFrame\n        cols = df.name  \n    myprint('\\n----- VALUE COUNTS -----', CVIOLET, bold=True, udl=True, \n            italic=False)\n    for col in cols:\n        res = pd.DataFrame(df[col].value_counts(dropna=False)).head(n_top)\n        myprint('\\nTop ' + str(n_top) + ' value counts for ' + str(col) \n                + ' (' + str(len(res)) + ' mod.):', \n                CGREEN, bold=True, udl=True, italic=False)\n        display(res)\n    return res    \n\n\n        \ndef visudf(df, text='', n=10):\n    '''Display some infos on a dataframe/series'''\n    \n    #print('\\nName:', namestr(df, locals())[0])\n    print('\\n', text, ':')\n    print('Object:', type(df))\n    print('Shape:', df.shape)\n    print('Types:', df.dtypes)\n    mydisplay(df.head(n))\n    print('\\n')\n    \n    \n    \ndef mem_usage(pandas_obj, list_typ):\n    '''Display the memory usage of a dataframe by type\n       Example: mem_usage(data0, ['float','int','object'])  \n    '''\n    \n    if isinstance(pandas_obj, pd.DataFrame):\n        usage_b = pandas_obj.memory_usage(deep=True).sum()\n    else: # we assume if not a df it's a series\n        usage_b = pandas_obj.memory_usage(deep=True)\n    usage_mb = usage_b / 1024 ** 2 # convert bytes to megabytes\n    print(\"\\n{:03.2f} MB\".format(usage_mb))  #same as sys.getsizeof\n        # (data0)/1024**2\n\n    for dtype in list_typ:\n        selected_dtype = data0.select_dtypes(include=[dtype])\n        sum_usage_b = selected_dtype.memory_usage(deep=True).sum()\n        sum_usage_mb = sum_usage_b / 1024 ** 2\n        print(\"Total memory usage for {} columns: {:03.2f} MB\"\n              .format(dtype,sum_usage_mb))\n        \n\n        \ndef mydisplay(df, gen_width=100, gens=None, dig=2, digs=None):\n    '''Pretty display of a DataFrame\n       gen_width is the width in pixels for all columns\n       gens is a dictionary giving specified width for some columns \n          (ex: gens['colname']=60)\n       dig is the number of digits after the dot for all numeric columns\n       digs is a dictionary giving specified dig for some columns\n    '''\n    \n    if isinstance(df, pd.Series):\n        df = df.to_frame()\n    dfs = (df.style\n             .set_table_styles([dict(selector=\"table, th, td\", \n                                     props=[('border', '1px solid indigo'),   \n                                            # {N}px solid {color}  \n                                            ('border-collapse', 'collapse'),  \n                                            # or ('border-color', '#96D4D4')\n                                            ])], overwrite=False)\n#              # To change the background one row out of two \n#              .set_table_styles([dict(selector=\"tr:nth-child(even)\", \n#                                      props=[('background-color', \n#                                                  '#0a3948'), #2E2E2E\n#                                             ])], overwrite=False)\n             # Header\n             .set_table_styles([dict(selector=\"th\", \n                                     props=[('text-align', 'center'),\n                                            ('word-break', 'break-all'),\n                                            ('min-width', str(gen_width) \n                                             + 'px'),   #'120px' or '30em'\n                                            ('max-width', str(gen_width) \n                                             + 'px'),\n                                            ('overflow', 'hidden'), \n                                            ('text-overflow', 'ellipsis'), \n                                            ('white-space', 'nowrap'),\n                                            ])], overwrite=False)             \n             # Data (cells)\n             .set_table_styles([dict(selector=\"td\", \n                                     props=[('text-align', 'center'),\n                                            ('word-break', 'break-all'), \n                                              # ('word-wrap', 'break-word')\n                                            ('min-width', str(gen_width) \n                                             + 'px'), \n                                            ('max-width', str(gen_width) \n                                             + 'px'),\n                                            ('overflow', 'hidden'),      \n                                              # necessary to cut text when \n                                              #   arrives at column width\n                                            ('text-overflow', 'ellipsis'), \n                                            ('white-space', 'nowrap'),\n                                            ])], overwrite=False)\n#              #To change only selected columns (may need to do the \n#              #  same for th also)\n#              if gens is not None:\n#                    for col in gens.keys:\n#                      .set_table_styles({col :[dict(selector='td', \n#                                              props=[('min-width', \n#                                              str(gens[col]) + 'px'),\n#                                                     ('max-width', \n#                                                      str(gens[col]) \n#                                                          + 'px'),\n#                                                   ])]}, overwrite=False) \n             # To show the full text when the mouse hover a cut text\n             .set_table_styles([dict(selector=\"td:hover\", \n                                     props=[('overflow', 'visible'),\n                                            ('white-space', 'unset'),\n                                           ])], overwrite=False) \n             .set_table_styles([dict(selector=\"th:hover\",  \n                                     props=[('overflow', 'visible'),\n                                            ('white-space', 'unset'),\n                                           ])], overwrite=False)\n#              .set_properties(subset=df.columns[0:3].values, \n#                              **{'width': '10px'}, \n#                              **{'max-width': '10px'})\n    # If not overwrite=False, the parameters set before are deleted\n    # For color code like '#2E2E2E' : \n    #   https://htmlcolorcodes.com/fr/selecteur-de-couleur/\n    # For color name like 'indigo':  \n    #   https://www.computerhope.com/jargon/w/w3c-color-names.htm \n\n    # .set_properties(**{'white-space': 'wrap'}) \n    # .set_properties(subset=['url'], **{'width': '46px'})#, \n    #                 **{'max-width:'46px'})   # for only some columns\n    # num_col_mask = df.dtypes.apply(lambda d: issubclass(np.dtype(d).type,\n    #                       np.number)) / subset=df.columns[num_col_mask]    \n    # #To change only selected columns (may need to do the same \n    # #  for th also)\n    ) \n    \n    if gens is not None:\n        for col in gens.keys():\n             dfs = dfs.set_table_styles({col :[dict(selector='td', \n                                     props=[('min-width', str(gens[col]) \n                                             + 'px'),\n                                            ('max-width', str(gens[col]) \n                                             + 'px'),\n                                           ])]}, overwrite=False)        \n            \n    dfs = dfs.format(precision=dig) \n#     df.style.format(precision=0, na_rep='MISSING', thousands=\" \",\n#                 formatter={('Decision Tree', 'Tumour'): \"{:.2f}\",\n#                            ('Regression', 'Non-Tumour'): lambda x: \n#                                \"$ {:,.1f}\".format(x*-1e6)  })\n\n    print(len(df), 'lines')\n    display(dfs) \n\n    \n\n    \n# def sep_func():\n#     '''Display a separator line & the function name at the start \n#           of a function\n#     '''\n    \n#     print(nl, 50*'-', sys._getframe().f_back.f_code.co_name, nl)\n#     #print(nl, 50*'-', sys._getframe().f_code.co_name, nl)\n#     a = 1\n    \n\n\n    \ndef ordered_boxplot(x, y, data):\n    '''Draw a boxplot of data[x] by data[y] ordered according to the \n          mean value of the boxes\n       x and y are column names from dataframe data\n       The count of each modality is added to y tick labels, as well \n          as a marker for the mean of each box\n    '''\n    \n    grouped = (data.loc[:,[x, y]]\n                   .groupby(y)\n                   .agg({x:['median', 'count']})\n                   .sort_values(by=(x, 'median'), ascending=False)\n              )\n    fig, ax = plt.subplots(figsize=(15,11)) \n    g = sns.boxplot(x=x, y=y, data=data, ax=ax, order=grouped.index, \n                    showmeans=True,   #, showfliers=False, orient='h'\n                    meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \n                               \"markeredgecolor\":\"blue\", \"markersize\":\"3\"})  \n    #g.set_xticklabels(g.get_xticklabels(), rotation=45, fontsize=10, \n    #  horizontalalignment='right')\n    ax.set_yticklabels([ind + ' (' + str(grouped.loc[ind, (x, 'count')]) \n                        + ')' for ind in grouped.index])\n                        #, fontdict={'fontsize': 7})\n    plt.show()    \n#     print([ind + ' (' + str(grouped.loc[ind, (x, 'count')]) + ')' \n#            for ind in grouped.index])\n\n\n\n\ndef mysound(): \n    '''Play a sound (when program finishes, when error, ...)'''\n    \n    play_time_seconds = 1  ;  framerate = 4410\n    t = np.linspace(0, play_time_seconds, framerate*play_time_seconds)\n    audio_data = np.sin(2*np.pi*300*t) + np.sin(2*np.pi*240*t)\n    display(Audio(audio_data, rate=framerate, autoplay=True))\n    \n    \n    \ndef custom_exc(shell, etype, evalue, tb, tb_offset=None):\n    '''This function will be called on exceptions in any cell'''\n    \n    shell.showtraceback((etype, evalue, tb), tb_offset=tb_offset)\n    mysound()    \n    \n# Play a sound when any error occurs    \nget_ipython().set_custom_exc((Exception,), custom_exc)\n\n\n\n    \ndef mygarbage():\n    '''Manual garbage collection (but doesn't seem to be effective)'''\n    \n    print(nl*3, \"Garbage Collection\", nl, \"threshold:\", gc.get_threshold()) \n    # gc.set_threshold()  #to get/set the threshold of automatic \n    #                     #  garbage collection for the 3 generations\n    print(\"len(get_objects):\",len(gc.get_objects()))\n    print(\"stats:\",gc.get_stats())\n    print(\"count:\",gc.get_count())  #number of objects for each generation\n    #gc.garbage\n    print(\"nb of collected:\", gc.collect(),'\\n')  #manual garbage collection\n    print(\"len(get_objects):\",len(gc.get_objects()))\n    print(\"stats:\",gc.get_stats())\n    print(\"count:\",gc.get_count(), nl*3)  #number of objects for each gen.\n\nmygarbage()\n    \n    \n    \n    \n# Quick function to pretty print & format numbers in a list\nf_pr0 = lambda list1: print(' - '.join('{:10,.0f}'.format(f)\n                                       .replace(',', ' ') for f in list1))\nf_pr3 = lambda list1: print(' - '.join('{:10,.3f}'.format(f)\n                                       .replace(',', ' ') for f in list1))\n\n\n\n# Get the name (as a string) of the variable\ndef namestr(obj, namespace):\n    '''Get the name (as a string) of the variable\n       Example: namestr(a, globals())[0]\n    '''\n    \n    return [name for name in namespace if namespace[name] is obj]\n\n\n\n# Plot all numerical and categorical variables in a df\ndef project_plot(data0, x_log0=True, y_log0=True):\n    '''Plots to explore numerical and categoricaldata and look for outliers\n       x_log & y_log to choose the scale of the plots on numeric \n          variables (easier to find outliers)\n    '''\n    \n    data0 = data0.copy()\n    max_mod = 30  # max number of modalities displayed per categorical var.\n    \n    # General data histograms\n    data0.hist(figsize=(15,14), bins=30)\n    plt.tight_layout()\n    plt.show()\n    \n    \n    # # Pairplot (takes several minutes)\n    # sns.pairplot(data0, hue='BuildingType', corner=True)\n    # plt.savefig('./pairplot5.png', dpi=400) \n#     lcol = list(data0.select_dtypes(include=[np.number]).columns)\n#     sns.pairplot(data0, vars=lcol, kind='reg', diag_kind='kde', \n#                  plot_kws={'scatter_kws': {'alpha': 0.1}})\n#     plt.show()\n    \n    \n    # Plot numeric (and date) data to see if outliers (use log on x and y)\n    num_cols = data0.select_dtypes(include=['number', 'datetime64[ns]']\n                                  ).columns\n    for c in num_cols:\n        print(nl, c)\n        x_log, y_log = x_log0, y_log0\n        if data0[c].dtype == 'datetime64[ns]':\n            x_log = False\n            format1 =\"%Y/%m/%d\"\n            data_date = pd.to_datetime(data0[c]).dt.date  # dtype=object \n                # if dt.date   or better use dt.floor('d') to keep type\n            val1 = pd.to_datetime(np.unique(data_date\n                                            .sort_values()\n                                            .values)[:15])  \n            val2 = pd.to_datetime(np.unique(data_date\n                                            .sort_values()\n                                            .values)[-15:][::-1])\n            print(' unique min =', [x.strftime(format1) if x==x else 'NaN' \n                                                        for x in val1])\n            print(' unique max =', [x.strftime(format1) if x==x else 'NaN' \n                                                        for x in val2])  \n        else:\n            print(' unique min =', [round(x, 1) if (abs(x)>=1) \n                                                else round(x, 3) \n                                    for x in np.unique(data0[c]\n                                                       .sort_values()\n                                                       .values)[:15]])\n            print(' unique max =', [round(x, 1) if (abs(x)>=1) \n                                                else round(x, 3) \n                                    for x in np.unique(data0[c]\n                                                       .sort_values()\n                                                       .values)[-15:][::-1]])\n        #data0b = data0.loc[data0[c]>0, c]  #remove value 0 just for \n        ##    plotting (for a better zoom)   \n        ##    to update if values negative possible\n        data0b = data0[c]\n        fig, ax = plt.subplots(figsize=(15,7))\n        x_min, x_max = data0b.min(), data0b.max() \n#         if data0b.dtype != 'datetime64[ns]':\n#             print('***', x_log, ((x_max-x_min)>1000))\n        if x_min == 0:\n            x_min=1e-5\n        if x_log and ((x_max-x_min)>100):\n            bins = np.geomspace(x_min, x_max, 250) #error if 0 in geomspace\n            ax.set_xscale('log')\n        else:\n            bins = 250\n            \n        data0b.hist(bins=bins, log=y_log)  \n        \n        ax.tick_params(axis='both', which='minor', bottom=True, left=True)\n        ax.tick_params(axis='both', which='major', bottom=True, left=True)\n\n        myxticks = [x for x in ax.get_xticks(minor=True) \n                    if (x>=x_min)*(x<=x_max)]\n        myxlabels = [str(x) for x in myxticks]\n        ax.set_xticks(myxticks, minor=True) #to avoid warning (xticks are \n            #the location and xticklabels their labels)\n        ax.set_xticklabels(myxlabels, rotation=30, fontsize=8, minor=True, \n                           horizontalalignment='right')\n\n        ax.set_xticks(ax.get_xticks()) #to avoid warning\n        ax.set_xticklabels(ax.get_xticklabels(), rotation=30, fontsize=8, \n                           horizontalalignment='right')\n        \n        if data0[c].dtype != 'datetime64[ns]':\n            print(data0[c].dtype)\n#             format1 = format(x)\n#         elif x_max >= 100:\n#             format1 = format(round(x, 1), ',')\n#         else:\n#             format1 = format(round(x, 2), ',')\n            nb = 1 if x_max >= 100 else 2\n            ax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(\n                lambda x, p: format(round(x, nb), ','))) #int(x)\n            ax.get_xaxis().set_major_formatter(mpl.ticker.FuncFormatter(\n                lambda x, p: format(round(x, nb), ',')))\n            ax.get_yaxis().set_minor_formatter(mpl.ticker.FuncFormatter(\n                lambda x, p: format(round(x, nb), ',')))\n            ax.get_xaxis().set_minor_formatter(mpl.ticker.FuncFormatter(\n                lambda x, p: format(round(x, nb), ',')))\n            ax.set_xlim(x_min, x_max) #must be at the end to get only \n                #plot for [x_min, x_max]\n        plt.show()\n\n        \n\n    # Plot categorical data (count plot)\n    for c in data0.select_dtypes(include=['object']).columns:\n        # trick because miss the case where we have like [1] which \n        #  is not considered as a list in pyhton\n        if 1:#(str(data0.iloc[1].loc[c])[0] != '[') and \n            #(sum(data0[c].isna())==0): \n            print(nl, c)\n            # if it contains a list, simply take the 1st element \n            #   (often there is only one element in the list)\n            data0[c] = data0[c].map(lambda x: x[0] if isinstance(x, list) \n                                              else x)\n            col_order = data0[c].value_counts().index\n            col_order = col_order[0:min(max_mod, len(col_order))]\n            mydisplay(data0[c].head())\n            print(type(col_order), col_order[:10])\n            fig, ax = plt.subplots(figsize=(15, 0.35*len(col_order)))\n            sns.countplot(y=c, order=col_order, data=data0)\n\n            # Print the value next to each bar\n            xmin, xmax = plt.xlim()\n            for p in ax.patches:\n                width = p.get_width()  # get bar length\n                ax.text(width + np.sqrt(xmax - 3)/10,  \n                        # set the text just after the bar\n                p.get_y() + p.get_height() / 2,  \n                        # get Y coordinate + X coordinate / 2\n                '{:1.0f}'.format(width), ha = 'left', va = 'center')  \n                        # vertical alignment\n            plt.show()\n        \n#         # Display the counts for each modality \n#         with pd.option_context('display.max_rows', None):\n#             mydisplay(data0[c].value_counts().sort_index()\n#                               .reset_index().head(100))\n\n\n\ndef mytimer(message):   \n    ''' Multi-Chronometer from start_time\n        Use first start_time = time.time()\n    '''\n    \n    sep_func()\n    print(f\"\\n**** {time.time() - start_time:.2f} seconds --- {message}\\n\")\n    \n    \n@contextmanager\ndef timer(title):\n    \"\"\" Gives the duration in secondsof a group of operations. Exemple: \n        with timer(\"Process credit card balance\"):\n            cc = credit_card_balance(idx=df['SK_ID_CURR']) \n            ...\n            del cc ; gc.collect()\n    \"\"\"\n    \n    t0 = time.time()\n    yield\n    print(\"{} - done in {:.0f}s\".format(title, time.time() - t0))\n\n\nstart_time=0\nmytimer('test')\n","metadata":{"_uuid":"b903acd6-7b7e-4c83-83d8-3ba566920bcb","_cell_guid":"ec00cc3d-c2be-45b9-abb9-8592367c77d8","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-08-09T23:01:54.745808Z","iopub.execute_input":"2022-08-09T23:01:54.746294Z","iopub.status.idle":"2022-08-09T23:01:55.054429Z","shell.execute_reply.started":"2022-08-09T23:01:54.746256Z","shell.execute_reply":"2022-08-09T23:01:55.053472Z"},"trusted":true},"execution_count":12,"outputs":[]}]}